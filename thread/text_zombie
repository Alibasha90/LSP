HOW TO AVOID ZOMBIE PROCESS:------





1). Using wait() system call : When the parent process calls wait(), after the creation of a child, it indicates that, it will wait for the child to complete and it will reap the exit status of the child. The parent process is suspended(waits in a waiting queue) until the child is terminated. It must be understood that during this period, the parent process does nothing just waits.



// A C program to demonstrate working of 
// fork()/wait() and Zombie processes 
#include<stdio.h> 
#include<unistd.h> 
#include<sys/wait.h> 
#include<sys/types.h> 
  
int main() 
{ 
    int i; 
    int pid = fork(); 
    if (pid==0) 
    { 
        for (i=0; i<20; i++) 
            printf("I am Child\n"); 
    } 
    else
    { 
        wait(NULL);  
        printf("I am Parent\n"); 
        while(1); 
    } 
} 






2. By ignoring the SIGCHLD signal : When a child is terminated, a corresponding SIGCHLD signal is delivered to the parent, if we call the â€˜signal(SIGCHLD,SIG_IGN)â€™, then the SIGCHLD signal is ignored by the system, and the child process entry is deleted from the process table. Thus, no zombie is created. However, in this case, the parent cannot know about the exit status of the child.


// A C program to demonstrate ignoring  
// SIGCHLD signal to prevent Zombie processes 
#include<stdio.h> 
#include<unistd.h> 
#include<sys/wait.h> 
#include<sys/types.h> 
  
int main() 
{ 
    int i; 
    int pid = fork(); 
    if (pid == 0) 
        for (i=0; i<20; i++) 
            printf("I am Child\n"); 
    else
    { 
        signal(SIGCHLD,SIG_IGN); 
        printf("I am Parent\n"); 
        while(1); 
    } 
} 

3. By using a signal handler : The parent process installs a signal handler for the SIGCHLD signal. The signal handler calls wait() system call within it. In this senario, when the child terminated, the SIGCHLD is delivered to the parent. On receipt of SIGCHLD, the corresponding handler is activated, which in turn calls the wait() system call. Hence, the parent collects the exit status almost immediately and the child entry in the process table is cleared. Thus no zombie is created.




// A C program to demonstrate handling of 
// SIGCHLD signal to prevent Zombie processes. 
#include<stdio.h> 
#include<unistd.h> 
#include<sys/wait.h> 
#include<sys/types.h> 
  
void func(int signum) 
{ 
    wait(NULL); 
} 
  
int main() 
{ 
    int i; 
    int pid = fork(); 
    if (pid == 0) 
        for (i=0; i<20; i++) 
            printf("I am Child\n"); 
    else
    { 
        signal(SIGCHLD, func); 
        printf("I am Parent\n"); 
        while(1); 
    } 
} 
OA
